import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

# Helper Functions.

# Names for all the colummns in the dataset.
COL = ["1block1", "1block2", "1block3", "1block4", "1block5", "1block6", "1block7", "1block8", "1block9", "2block1", "2block2", "2block3", "2block4", "2block5", "2block6", "2block7", "2block8", "2block9", "3block1", "3block2", "3block3", "3block4", "3block5", "3block6", "3block7", "3block8", "3block9", "4block1", "4block2", "4block3", "4block4", "4block5", "4block6", "4block7", "4block8", "4block9", "5block1", "5block2", "5block3", "5block4", "5block5", "5block6", "5block7", "5block8", "5block9", "6block1", "6block2", "6block3", "6block4", "6block5", "6block6", "6block7", "6block8", "6block9", "7block1", "7block2", "7block3", "7block4", "7block5", "7block6", "7block7", "7block8", "7block9", "8block1", "8block2", "8block3", "8block4", "8block5", "8block6", "8block7", "8block8", "8block9", "9block1", "9block2", "9block3", "9block4", "9block5", "9block6", "9block7", "9block8", "9block9", "10block1", "10block2", "10block3", "10block4", "10block5", "10block6", "10block7", "10block8", "10block9", "11block1", "11block2", "11block3", "11block4", "11block5", "11block6", "11block7", "11block8", "11block9", "12block1", "12block2", "12block3", "12block4", "12block5", "12block6", "12block7", "12block8", "12block9", "13block1", "13block2", "13block3", "13block4", "13block5", "13block6", "13block7", "13block8", "13block9", "14block1", "14block2", "14block3", "14block4", "14block5", "14block6", "14block7", "14block8", "14block9", "15block1", "15block2", "15block3", "15block4", "15block5", "15block6", "15block7", "15block8", "15block9", "16block1", "16block2", "16block3", "16block4", "16block5", "16block6", "16block7", "16block8", "16block9", "17block1", "17block2", "17block3", "17block4", "17block5", "17block6", "17block7", "17block8", "17block9", "18block1", "18block2", "18block3", "18block4", "18block5", "18block6", "18block7", "18block8", "18block9", "19block1", "19block2", "19block3", "19block4", "19block5", "19block6", "19block7", "19block8", "19block9", "20block1", "20block2", "20block3", "20block4", "20block5", "20block6", "20block7", "20block8", "20block9", "21block1", "21block2", "21block3", "21block4", "21block5", "21block6", "21block7", "21block8", "21block9", "22block1", "22block2", "22block3", "22block4", "22block5", "22block6", "22block7", "22block8", "22block9", "23block1", "23block2", "23block3", "23block4", "23block5", "23block6", "23block7", "23block8", "23block9", "24block1", "24block2", "24block3", "24block4", "24block5", "24block6", "24block7", "24block8", "24block9", "25block1", "25block2", "25block3", "25block4", "25block5", "25block6", "25block7", "25block8", "25block9", "26block1", "26block2", "26block3", "26block4", "26block5", "26block6", "26block7", "26block8", "26block9", "27block1", "27block2", "27block3", "27block4", "27block5", "27block6", "27block7", "27block8", "27block9", "28block1", "28block2", "28block3", "28block4", "28block5", "28block6", "28block7", "28block8", "28block9", "29block1", "29block2", "29block3", "29block4", "29block5", "29block6", "29block7", "29block8", "29block9", "30block1", "30block2", "30block3", "30block4", "30block5", "30block6", "30block7", "30block8", "30block9", "31block1", "31block2", "31block3", "31block4", "31block5", "31block6", "31block7", "31block8", "31block9", "32block1", "32block2", "32block3", "32block4", "32block5", "32block6", "32block7", "32block8", "32block9", "33block1", "33block2", "33block3", "33block4", "33block5", "33block6", "33block7", "33block8", "33block9", "34block1", "34block2", "34block3", "34block4", "34block5", "34block6", "34block7", "34block8", "34block9", "35block1", "35block2", "35block3", "35block4", "35block5", "35block6", "35block7", "35block8", "35block9", "36block1", "36block2", "36block3", "36block4", "36block5", "36block6", "36block7", "36block8", "36block9", "37block1", "37block2", "37block3", "37block4", "37block5", "37block6", "37block7", "37block8", "37block9", "38block1", "38block2", "38block3", "38block4", "38block5", "38block6", "38block7", "38block8", "38block9", "39block1", "39block2", "39block3", "39block4", "39block5", "39block6", "39block7", "39block8", "39block9", "40block1", "40block2", "40block3", "40block4", "40block5", "40block6", "40block7", "40block8", "40block9", "41block1", "41block2", "41block3", "41block4", "41block5", "41block6", "41block7", "41block8", "41block9", "42block1", "42block2", "42block3", "42block4", "42block5", "42block6", "42block7", "42block8", "42block9", "43block1", "43block2", "43block3", "43block4", "43block5", "43block6", "43block7", "43block8", "43block9", "44block1", "44block2", "44block3", "44block4", "44block5", "44block6", "44block7", "44block8", "44block9", "45block1", "45block2", "45block3", "45block4", "45block5", "45block6", "45block7", "45block8", "45block9", "46block1", "46block2", "46block3", "46block4", "46block5", "46block6", "46block7", "46block8", "46block9", "47block1", "47block2", "47block3", "47block4", "47block5", "47block6", "47block7", "47block8", "47block9", "48block1", "48block2", "48block3", "48block4", "48block5", "48block6", "48block7", "48block8", "48block9", "49block1", "49block2", "49block3", "49block4", "49block5", "49block6", "49block7", "49block8", "49block9", "50block1", "50block2", "50block3", "50block4", "50block5", "50block6", "50block7", "50block8", "50block9", "51block1", "51block2", "51block3", "51block4", "51block5", "51block6", "51block7", "51block8", "51block9", "52block1", "52block2", "52block3", "52block4", "52block5", "52block6", "52block7", "52block8", "52block9", "53block1", "53block2", "53block3", "53block4", "53block5", "53block6", "53block7", "53block8", "53block9", "54block1", "54block2", "54block3", "54block4", "54block5", "54block6", "54block7", "54block8", "54block9", "55block1", "55block2", "55block3", "55block4", "55block5", "55block6", "55block7", "55block8", "55block9", "56block1", "56block2", "56block3", "56block4", "56block5", "56block6", "56block7", "56block8", "56block9", "57block1", "57block2", "57block3", "57block4", "57block5", "57block6", "57block7", "57block8", "57block9", "58block1", "58block2", "58block3", "58block4", "58block5", "58block6", "58block7", "58block8", "58block9", "59block1", "59block2", "59block3", "59block4", "59block5", "59block6", "59block7", "59block8", "59block9", "60block1", "60block2", "60block3", "60block4", "60block5", "60block6", "60block7", "60block8", "60block9", "61block1", "61block2", "61block3", "61block4", "61block5", "61block6", "61block7", "61block8", "61block9", "62block1", "62block2", "62block3", "62block4", "62block5", "62block6", "62block7", "62block8", "62block9", "63block1", "63block2", "63block3", "63block4", "63block5", "63block6", "63block7", "63block8", "63block9", "64block1", "64block2", "64block3", "64block4", "64block5", "64block6", "64block7", "64block8", "64block9", "65block1", "65block2", "65block3", "65block4", "65block5", "65block6", "65block7", "65block8", "65block9", "66block1", "66block2", "66block3", "66block4", "66block5", "66block6", "66block7", "66block8", "66block9", "67block1", "67block2", "67block3", "67block4", "67block5", "67block6", "67block7", "67block8", "67block9", "68block1", "68block2", "68block3", "68block4", "68block5", "68block6", "68block7", "68block8", "68block9", "69block1", "69block2", "69block3", "69block4", "69block5", "69block6", "69block7", "69block8", "69block9", "70block1", "70block2", "70block3", "70block4", "70block5", "70block6", "70block7", "70block8", "70block9", "71block1", "71block2", "71block3", "71block4", "71block5", "71block6", "71block7", "71block8", "71block9", "72block1", "72block2", "72block3", "72block4", "72block5", "72block6", "72block7", "72block8", "72block9", "73block1", "73block2", "73block3", "73block4", "73block5", "73block6", "73block7", "73block8", "73block9", "74block1", "74block2", "74block3", "74block4", "74block5", "74block6", "74block7", "74block8", "74block9", "75block1", "75block2", "75block3", "75block4", "75block5", "75block6", "75block7", "75block8", "75block9", "76block1", "76block2", "76block3", "76block4", "76block5", "76block6", "76block7", "76block8", "76block9", "77block1", "77block2", "77block3", "77block4", "77block5", "77block6", "77block7", "77block8", "77block9", "78block1", "78block2", "78block3", "78block4", "78block5", "78block6", "78block7", "78block8", "78block9", "79block1", "79block2", "79block3", "79block4", "79block5", "79block6", "79block7", "79block8", "79block9", "80block1", "80block2", "80block3", "80block4", "80block5", "80block6", "80block7", "80block8", "80block9", "81block1", "81block2", "81block3", "81block4", "81block5", "81block6", "81block7", "81block8", "81block9", "82block1", "82block2", "82block3", "82block4", "82block5", "82block6", "82block7", "82block8", "82block9", "83block1", "83block2", "83block3", "83block4", "83block5", "83block6", "83block7", "83block8", "83block9", "84block1", "84block2", "84block3", "84block4", "84block5", "84block6", "84block7", "84block8", "84block9", "85block1", "85block2", "85block3", "85block4", "85block5", "85block6", "85block7", "85block8", "85block9", "86block1", "86block2", "86block3", "86block4", "86block5", "86block6", "86block7", "86block8", "86block9", "87block1", "87block2", "87block3", "87block4", "87block5", "87block6", "87block7", "87block8", "87block9", "88block1", "88block2", "88block3", "88block4", "88block5", "88block6", "88block7", "88block8", "88block9", "89block1", "89block2", "89block3", "89block4", "89block5", "89block6", "89block7", "89block8", "89block9", "90block1", "90block2", "90block3", "90block4", "90block5", "90block6", "90block7", "90block8", "90block9", "91block1", "91block2", "91block3", "91block4", "91block5", "91block6", "91block7", "91block8", "91block9", "92block1", "92block2", "92block3", "92block4", "92block5", "92block6", "92block7", "92block8", "92block9", "93block1", "93block2", "93block3", "93block4", "93block5", "93block6", "93block7", "93block8", "93block9", "94block1", "94block2", "94block3", "94block4", "94block5", "94block6", "94block7", "94block8", "94block9", "95block1", "95block2", "95block3", "95block4", "95block5", "95block6", "95block7", "95block8", "95block9", "96block1", "96block2", "96block3", "96block4", "96block5", "96block6", "96block7", "96block8", "96block9", "97block1", "97block2", "97block3", "97block4", "97block5", "97block6", "97block7", "97block8", "97block9", "98block1", "98block2", "98block3", "98block4", "98block5", "98block6", "98block7", "98block8", "98block9", "99block1", "99block2", "99block3", "99block4", "99block5", "99block6", "99block7", "99block8", "99block9", "100block1", "100block2", "100block3", "100block4", "100block5", "100block6", "100block7", "100block8", "100block9", "rand1", "rand2", "rand3", "rand4", "rand5", "rand6", "rand7", "rand8", "rand9", "rand10", "rand11", "rand12", "rand13", "rand14", "rand15", "rand16", "red1", "red2", "red3", "red4", "red5", "red6", "red7", "red8", "red9", "red10", "red11", "red12", "red13", "red14", "red15", "red16", "green1", "green2", "green3", "green4", "green5", "green6", "green7", "green8", "green9", "green10", "green11", "green12", "green13", "green14", "green15", "green16", "blue1", "blue2", "blue3", "blue4", "blue5", "blue6", "blue7", "blue8", "blue9", "blue10", "blue11", "blue12", "blue13", "blue14", "blue15", "blue16"]

# Cleans the data.
def cleanData(df):
    df = df.dropna() # Removes rows with null values.
    df = df.drop_duplicates() # Remove rows that are duplicates.
    remove_hog = ((df.loc[:, :"100block9"] > 1) | (df.loc[:, "1block1":"100block9"] < 0)).any(axis=1) # Get the rows to remove based on if the hog value is greater than one or less than zero.
    remove_colour = (df.loc[:, "red1":"blue16"] < 0).any(axis=1) # Get the rows to remove based on if the colour value is less than zero.
    df = df[~remove_hog] # Remove hog rows.
    df = df[~remove_colour] # Remove colour rows.
    df.loc[:,"1block1": "blue16"].astype('int')
    return df

# Evaluates the model.
def evaluation(model, x, y_true):
    y_hat = model.predict(x) # Gets the prediction based on the model.
    class_accuracy = accuracy_score(y_true,y_hat) # Calculates the accuracy of the predictions.
    confusionMatrix = confusion_matrix(y_true, y_hat) # Calculates the confusion matrix.
    report = classification_report(y_true, y_hat)
    balancedAccuracyScore = balanced_accuracy_score(y_true, y_hat)

    # Prints the results.
    print("Classification Accuracy: " + str(class_accuracy))
    print('Balanced Accuracy = {0:0.3f}'.format(balancedAccuracyScore))
    print('Confusion Matrix = \n', confusionMatrix)
    print('Classification Report = \n', report)

# Performs feature elimination on the HOG features.
def getHOGFeatures(df, firstRun, pca):
    new_df = df.loc[:, "1block1": "100block9"] # Gets the HOG features.
    if (firstRun):
        new_df = pd.DataFrame(pca.fit_transform(new_df), index= df.index) # Fits the model and updates the cols.
    else:
        new_df = pd.DataFrame(pca.transform(new_df), index= df.index) # Updates the cols.
    df.drop(df.loc[:, "1block1": "100block9"].columns, axis=1, inplace=True) # Replaces the columns with the updated cols.
    df = pd.concat([new_df, df], axis=1) # Concatonates the two dataframes together.
    return df

# Normalises the colour features.
def getColourFeatures(df, firstRun, norm):
    new_df = df.loc[:, "red1":"blue16"] # Gets the features.
    if(firstRun):
        new_df = pd.DataFrame(norm.fit_transform(new_df), index= df.index, columns=new_df.columns) # Fits the model and updates the cols.
    else:
        new_df = pd.DataFrame(norm.transform(new_df), index= df.index, columns=new_df.columns) # Updates the cols.
    df.drop(df.loc[:, "red1":"blue16"].columns, axis=1, inplace=True) # Replaces the columns with the updated cols.
    df = pd.concat([df, new_df], axis=1) # Concatonates the two dataframes together.
    return df

# Performs feature elimination of the input features.
def featureElimination(df, firstRun, pca, norm):
    df.drop(df.loc[:, "rand1": "rand16"].columns, axis=1, inplace=True) # Removes the unnessesary features.
    df = getHOGFeatures(df, firstRun, pca) # Transforms the HOG features.
    df = getColourFeatures(df, firstRun, norm) # Transforms the colour features.
    return df

# Builds the output classifications for moderator testing.
def buildCSV(type, y):
    predictions_df = pd.DataFrame()
    predictions_df['Class'] = y
    predictions_df.to_csv(path_or_buf=type + '_Y_test.csv', index= False)